// Generated by dirt --gen. Instead of editing directly, modify the file structure in this directory

mod action_blocker;
mod action_scope;
mod breadcrumbs;
mod button;
mod card;
mod center;
mod center_layout;
mod checkbox_input;
mod circle_progress;
mod divider;
mod flex;
mod fragment;
mod header;
mod icon;
mod icon_button;
mod image;
mod label;
mod modal;
mod nested_flow;
mod padding;
mod preview_box;
mod radio_input;
mod scrollable_box;
mod sidebar_layout;
mod skeleton;
mod table;
mod text_input;
mod update_boundary;

pub use action_blocker::*;
pub use action_scope::*;
pub use breadcrumbs::*;
pub use button::*;
pub use card::*;
pub use center::*;
pub use center_layout::*;
pub use checkbox_input::*;
pub use circle_progress::*;
pub use divider::*;
pub use flex::*;
pub use fragment::*;
pub use header::*;
pub use icon::*;
pub use icon_button::*;
pub use image::*;
pub use label::*;
pub use modal::*;
pub use nested_flow::*;
pub use padding::*;
pub use preview_box::*;
pub use radio_input::*;
pub use scrollable_box::*;
pub use sidebar_layout::*;
pub use skeleton::*;
pub use table::*;
pub use text_input::*;
pub use update_boundary::*;

use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize, JsonSchema)]
#[serde(tag = "type", content = "def")]
pub enum Component {
	ActionBlocker(ActionBlocker),
	ActionScope(ActionScope),
	Breadcrumbs(Breadcrumbs),
	Button(Button),
	Card(Card),
	Center(Center),
	CenterLayout(CenterLayout),
	CheckboxInput(CheckboxInput),
	CircleProgress(CircleProgress),
	Divider(Divider),
	Flex(Flex),
	Fragment(Fragment),
	Header(Header),
	Icon(Icon),
	IconButton(IconButton),
	Image(Image),
	Label(Label),
	Modal(Modal),
	NestedFlow(NestedFlow),
	Padding(Padding),
	PreviewBox(PreviewBox),
	RadioInput(RadioInput),
	ScrollableBox(ScrollableBox),
	SidebarLayout(SidebarLayout),
	Skeleton(Skeleton),
	Table(Table),
	TextInput(TextInput),
	UpdateBoundary(UpdateBoundary),
}

impl From<ActionBlocker> for Component {
	fn from(value: ActionBlocker) -> Component {
		Component::ActionBlocker(value)
	}
}

impl From<ActionScope> for Component {
	fn from(value: ActionScope) -> Component {
		Component::ActionScope(value)
	}
}

impl From<Breadcrumbs> for Component {
	fn from(value: Breadcrumbs) -> Component {
		Component::Breadcrumbs(value)
	}
}

impl From<Button> for Component {
	fn from(value: Button) -> Component {
		Component::Button(value)
	}
}

impl From<Card> for Component {
	fn from(value: Card) -> Component {
		Component::Card(value)
	}
}

impl From<Center> for Component {
	fn from(value: Center) -> Component {
		Component::Center(value)
	}
}

impl From<CenterLayout> for Component {
	fn from(value: CenterLayout) -> Component {
		Component::CenterLayout(value)
	}
}

impl From<CheckboxInput> for Component {
	fn from(value: CheckboxInput) -> Component {
		Component::CheckboxInput(value)
	}
}

impl From<CircleProgress> for Component {
	fn from(value: CircleProgress) -> Component {
		Component::CircleProgress(value)
	}
}

impl From<Divider> for Component {
	fn from(value: Divider) -> Component {
		Component::Divider(value)
	}
}

impl From<Flex> for Component {
	fn from(value: Flex) -> Component {
		Component::Flex(value)
	}
}

impl From<Fragment> for Component {
	fn from(value: Fragment) -> Component {
		Component::Fragment(value)
	}
}

impl From<Header> for Component {
	fn from(value: Header) -> Component {
		Component::Header(value)
	}
}

impl From<Icon> for Component {
	fn from(value: Icon) -> Component {
		Component::Icon(value)
	}
}

impl From<IconButton> for Component {
	fn from(value: IconButton) -> Component {
		Component::IconButton(value)
	}
}

impl From<Image> for Component {
	fn from(value: Image) -> Component {
		Component::Image(value)
	}
}

impl From<Label> for Component {
	fn from(value: Label) -> Component {
		Component::Label(value)
	}
}

impl From<Modal> for Component {
	fn from(value: Modal) -> Component {
		Component::Modal(value)
	}
}

impl From<NestedFlow> for Component {
	fn from(value: NestedFlow) -> Component {
		Component::NestedFlow(value)
	}
}

impl From<Padding> for Component {
	fn from(value: Padding) -> Component {
		Component::Padding(value)
	}
}

impl From<PreviewBox> for Component {
	fn from(value: PreviewBox) -> Component {
		Component::PreviewBox(value)
	}
}

impl From<RadioInput> for Component {
	fn from(value: RadioInput) -> Component {
		Component::RadioInput(value)
	}
}

impl From<ScrollableBox> for Component {
	fn from(value: ScrollableBox) -> Component {
		Component::ScrollableBox(value)
	}
}

impl From<SidebarLayout> for Component {
	fn from(value: SidebarLayout) -> Component {
		Component::SidebarLayout(value)
	}
}

impl From<Skeleton> for Component {
	fn from(value: Skeleton) -> Component {
		Component::Skeleton(value)
	}
}

impl From<Table> for Component {
	fn from(value: Table) -> Component {
		Component::Table(value)
	}
}

impl From<TextInput> for Component {
	fn from(value: TextInput) -> Component {
		Component::TextInput(value)
	}
}

impl From<UpdateBoundary> for Component {
	fn from(value: UpdateBoundary) -> Component {
		Component::UpdateBoundary(value)
	}
}
