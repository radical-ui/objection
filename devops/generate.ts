import { Component } from './collect.ts'
import { cases, dtils, jsonSchema, pathUtils } from './deps.ts'
import { formatRs, formatTs } from './utils.ts'

export async function generateTypes() {
	await dtils.sh(`cargo build --package svelte_toolbox_expose_dev --bin get_schema`)

	const getSchema = async () => {
		const { logLines } = await dtils.shCapture(`./target/debug/get_schema`)
		const schema = JSON.parse(logLines.join('\n'))

		return await jsonSchema.compile(schema, 'Ui', {
			bannerComment: '',
			additionalProperties: false,
		})
	}

	await dtils.writeText(
		'runtime/types.ts',
		await formatTs(`
			// Generated by dirt --gen. Instead of editing, change the rust definitions.\n// deno-lint-ignore-file

			${await getSchema()}
		`),
	)
}

export async function generateTsMod(components: Component[], path: string) {
	const imports: string[] = []
	const conditions: string[] = []

	for (const component of components) {
		const file = pathUtils.relative('components', component.tsPath)
		const condition = `if (component.type === '${cases.pascalCase(component.name)}')`

		imports.push(`import { ${component.tsRenderName} } from './${file}'`)

		if (component.name === 'fragment') conditions.push(`${condition} return <${component.tsRenderName} />`)
		else conditions.push(`${condition} return <${component.tsRenderName} {...component.def} />`)
	}

	imports.unshift("import { Component, React } from '../runtime/mod.ts'")

	await dtils.writeText(
		path,
		await formatTs(`
			// Generated by dirt --gen. Instead of editing directly, modify the source rust and ts files in the components directory.

			${imports.join('\n')}

			export function ComponentRender(component: Component) {
				${conditions.join('\n')}

				return <>Unknown Component</>
			}
		`),
	)
}

export async function generateRustMod(components: Component[], path: string) {
	const modDefs: string[] = []
	const pubUses: string[] = []
	const componentItems: string[] = []
	const impls: string[] = []

	for (const component of components) {
		const type = cases.pascalCase(component.name)

		modDefs.push(`mod ${component.name};`)
		pubUses.push(`pub use ${component.name}::*;`)
		componentItems.push(`${type}(${type}),`)
		impls.push(`impl From<${type}> for Component {\nfn from(value: ${type}) -> Component {\nComponent::${type}(value)\n}\n}`)
	}

	await dtils.writeText(
		path,
		await formatRs(`
			// Generated by dirt --gen. Instead of editing directly, modify the file structure in this directory

			${modDefs.join('\n')}

			${pubUses.join('\n')}

			use schemars::JsonSchema;
			use serde::{Deserialize, Serialize};

			#[derive(Debug, Serialize, Deserialize, JsonSchema)]\n#[serde(tag = "type", content = "def")]
			pub enum Component {
				${componentItems.join('\n')}
			}

			${impls.join('\n\n')}\n`),
	)
}

export async function generateRustExamples(components: Component[]) {
	const entries: string[] = []

	for (const component of components) {
		for (const example of component.rsExamples) {
			entries.push(`.auto_item(PreviewBox::new("${component.name}", { ${example} }))`)
		}
	}

	await dtils.writeText(
		'expose_dev/get_examples.rs',
		await formatRs(`
			// Generated by dirt --gen. Instead of editing directly, modify the rust code embedded into the doc comments of items in the components folder.

			use svelte_toolbox::*;
			use serde_json::to_string_pretty;
			use uuid::Uuid;
			use serde::{Serialize, Deserialize};

			#[allow(unused_braces)]
			fn main() {
				let root = Flex::new(FlexKind::Column).gap(50)${entries.join('\n')};

				let mut theme = Theme::default();
				theme.window_scrolling = true;

				let window = Window {
					theme: Some(theme),
					root_component: Padding::all(50).body(root).into(),
					title: "Component Examples".into(),
				};

				println!("{}", to_string_pretty(&window).unwrap())
			}
		`),
	)
}
